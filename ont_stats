import os
import sys
import logging
import argparse
import matplotlib

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from typing import Generator, List

matplotlib.use("Agg")

logging.basicConfig(
    format="%(levelname)s (%(asctime)s): %(message)s (Line: %(lineno)d [%(filename)s])",
    datefmt="%m/%d/%Y %I:%M:%S %p",
    level=logging.WARNING,
)

OUTPUT_HEADER = ["Sample", "Coverage(X)", "Coverage(X,100kb+)", "N50(kb)", "Reads"]


def NX(nums, X):
    nums = sorted(nums, key=int, reverse=True)
    datathresh = sum(nums) * (X / 100.0)
    total = 0
    for num in nums:
        total += num
        if total >= datathresh:
            return num
    return 0


def get_n50(vals: np.ndarray, *, sort: bool = False):
    if sort:
        vals = np.flip(np.sort(vals))
    vals_csum = np.cumsum(vals)
    val_mdpt = vals_csum[-1] // 2
    return vals[np.sum(vals_csum <= val_mdpt)] / 1000


parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument(
    "--fofns",
    "-f",
    nargs="*",
    metavar="SM=FOFN",
    help="FOFN of sequence reads with sample name. FILES MUST BE INDEXED",
)
parser.add_argument(
    "--fais",
    nargs="*",
    metavar="SM=FAI",
    help="Index of sequence reads with sample name.",
)
parser.add_argument(
    "--genome", "-g", type=float, required=False, help="Genome size in Gbp", default=3.1
)
parser.add_argument(
    "--outfile",
    "-o",
    type=argparse.FileType("at"),
    required=False,
    help="Output file to write to",
    default=sys.stdout,
)
parser.add_argument(
    "--tab",
    "-t",
    required=False,
    action="store_true",
    help="Output information in a tab-delimited format",
)
parser.add_argument(
    "--plot_dir",
    "-p",
    type=str,
    required=False,
    help="Plot the read length distribution and save to the provided argument",
)
parser.add_argument(
    "--max_read_len",
    type=int,
    default=5_000,
    help="Max read length to plot."
)
parser.add_argument(
    "--plot_ext",
    choices=["png", "pdf"],
    default="pdf",
    help="Plot format."
)

args = parser.parse_args()


def read_fofns(fofns: List[str]) -> Generator[pd.DataFrame, None, None]:
    for sm_fofn in fofns:
        sm_fofn: str
        sm, _, fofn = sm_fofn.partition("=")

        for f in open(fofn, "rt").readlines():
            f = f.strip()
            if f:
                yield pd.read_csv(
                    f + ".fai", sep="\t", header=None, usecols=[0, 1]
                ).assign(sm=sm)


def read_fais(fais: List[str]) -> Generator[pd.DataFrame, None, None]:
    for sm_fai in fais:
        sm_fai: str
        sm, _, fai = sm_fai.partition("=")

        yield pd.read_csv(fai, sep="\t", header=None, usecols=[0, 1]).assign(sm=sm)


if args.fofns:
    df = pd.concat(read_fofns(args.fofns))
elif args.fais:
    df = pd.concat(read_fais(args.fais))
else:
    raise ValueError("No option given.")

if args.tab:
    args.outfile.write("\t".join(OUTPUT_HEADER) + "\n")

for sm in df["sm"].unique():
    df_sm: pd.DataFrame = df.loc[df["sm"] == sm]
    len_list = np.flip(np.sort(df_sm[1].to_numpy()))
    len_list_k = df_sm.loc[df_sm[1] >= 100_000][1].to_numpy()
    n50 = get_n50(len_list)

    coverage = np.sum(len_list) / (args.genome * 1_000_000_000)
    coverage_k = np.sum(len_list_k) / (args.genome * 1_000_000_000)

    if not args.tab:
        args.outfile.write(f"{sm}\n")
        args.outfile.write(
            "Coverage (X): {:,.2f}\n"
            "Coverage 100k+ (X): {:,.2f}\n"
            "N50 (kbp):   {:,.2f}\n"
            "Reads:	 {:,.0f}\n".format(
                coverage,
                coverage_k,
                n50,
                len(len_list),
            )
        )
    else:
        out_df = pd.DataFrame.from_dict(
            dict(
                zip(
                    OUTPUT_HEADER,
                    [
                        [sm],
                        [round(coverage, 2)],
                        [round(coverage_k, 2)],
                        [round(n50, 2)],
                        [len(len_list)],
                    ],
                )
            )
        )
        out_df.to_csv(args.outfile, sep="\t", index=False, header=False, mode="a")

    if args.plot_dir:
        os.makedirs(args.plot_dir, exist_ok=True)

    sns.set_theme(font_scale=3)
    sns.set_style("ticks")
    fig, ax = plt.subplots(figsize=(20, 12))

    values = df_sm[1][df_sm[1] < args.max_read_len]
    bin_size = 10
    bins = values.max() // bin_size

    # make histogram
    sns.histplot(values, bins=bins, kde=False, ax=ax)
    # get maxes
    myy = ax.get_ylim()[1]
    mymax = max(values)

    # add vertical lines
    vals = [
        values.median(),
        values.mean(),
        NX(values, 50.0),
        NX(values, 1.0),
        mymax,
    ]
    names = ["Median", "Mean", "N50", "N1", "Max"]
    divs = [0.9, 0.8, 0.7, 0.6, 0.5]
    for name, val, div in zip(names, vals, divs):
        plt.axvline(x=val, color="darkred", linestyle="dashed")
        label = "{}={}".format(name, round(val / 1000, 1))
        plt.text(val + 0.01, myy * div, label, fontsize=28)

    Gb = sum(values) / 1000000000
    plt.xlabel("Length (bp), Total Gb = {:.2f}".format(Gb))
    plt.ylabel("Number of reads")
    plt.tight_layout()
    plt.savefig(
        os.path.join(args.plot_dir, f"{sm}_read_length.{args.plot_ext}"), bbox_inches="tight"
    )
